import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// A "slice" is a collection of Redux reducer logic and actions for a single feature
const initialState = {
  cart: {},
};

// Write "mutating" logic ONLY in Redux Toolkit's createSlice and createReducer because they use Immer inside.
export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      const id = action.payload.id
      let amount = state.cart[id] || 0
      amount += action.payload.amount
      if (amount == 0) {
        delete state.cart[id]
      } else {
        state.cart[id] = amount
      }
    },
    releaseCart: (state, action) => {
      state.cart = {}
    },
    setByAmount: (state, action) => {
      const id = action.payload.id
      let amount = action.payload.amount
      if (amount == 0) {
        delete state.cart[id]
      } else {
        state.cart[id] = amount
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => { },
});

export const { incrementByAmount, releaseCart, setByAmount } = cartSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.cart.cart;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const add = (amount, id) => (dispatch, getState) => {
  const cart = selectCount(getState())
  const amount1 = cart[id] || 0
  if (amount1 + amount >= 0) {
    dispatch(incrementByAmount({ amount, id }));
  }
};

export const change = (amount, id) => (dispatch, getState) => {
  if (amount >= 0) {
    dispatch(setByAmount({ amount, id }))
  }
};

export default cartSlice.reducer;
